Moudle:
1)The figure below shows a very simple circuit with a sub-module. In this exercise, create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) to your top-level module's three ports (wires a, b, and out). The module mod_a is provided for you â€” you must instantiate it.
When connecting modules, only the ports on the module are important. You do not need to know the code inside the module. The code for module mod_a looks like this:
You may connect signals to the module by port name or port position. For extra practice, try both methods.
code:
module top_module ( input a, input b, output out );
    mod_a a1(.in1(a),.in2(b),.out(out)); 

endmodule

2)You are given a module named mod_a that has 2 outputs and 4 inputs, in that order. You must connect the 6 ports by position to your top-level module's ports out1, out2, a, b, c, and d, in that order.
code:
module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);
    mod_a a1(out1,out2,a,b,c,d); \\ instantation by postion

endmodule
3) You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. You must connect the 6 ports by name to your top-level module's ports:
code:
module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);
    mod_a a1(.out1(out1),.out2(out2),.in1(a),.in2(b),.in3(c),.in4(d));\\ instantation by name
endmodule
4)You are given a module my_dff with two inputs and one output (that implements a D flip-flop). Instantiate three of them, then chain them together to make a shift register of length 3. The clk port needs to be connected to all instances.

The module provided to you is: module my_dff ( input clk, input d, output q );

Note that to make the internal connections, you will need to declare some wires. Be careful about naming your wires and module instances: the names must be unique.
code:
module top_module ( input clk, input d, output q );
    wire w1,w2;
    my_dff a1(.clk(clk),.d(d),.q(w1));
    my_dff a2(.clk(clk),.d(w1),.q(w2));
    my_dff a3(.clk(clk),.d(w2),.q(q));

endmodule
5)You are given a module add16 that performs a 16-bit addition. Instantiate two of them to create a 32-bit adder. One add16 module computes the lower 16 bits of the addition result, while the second add16 module computes the upper 16 bits of the result, after receiving the carry-out from the first adder. Your 32-bit adder does not need to handle carry-in (assume 0) or carry-out (ignored), but the internal modules need to in order to function correctly. (In other words, the add16 module performs 16-bit a + b + cin, while your module performs 32-bit a + b).

Connect the modules together as shown in the diagram below. The provided module add16 has the following declaration:
code:
module top_module(
    input [31:0] a,
    input [31:0] b,
    output [31:0] sum
);
    wire w1,cin,cout;
    add16 a1(.a(a[15:0]),.b(b[15:0]),.cin(1'b0),.sum(sum[15:0]),.cout(w1));
    add16 a2(.a(a[31:16]),.b(b[31:16]),.cin(w1),.sum(sum[31:16]),.cout(cout));

endmodule

